[{"slug":"anemic-vs-rich-domain-models","title":"Anemic vs Rich Domain Models","categories":["Software design","Domain driven design"],"pubDate":"2020-03-24T04:49:46.000Z","excerpt":"An **Anemic Domain Model** is a model that is focused on the state of the object. This is not what is advised while using **Domain Driven Design** ( **DDD** ) to develop a software. Usually, it&#39;s…"},{"slug":"dependency-inversion-principle","title":"D from SOLID","categories":["Software design","SOLID"],"pubDate":"2024-07-24T23:00:46.000Z","excerpt":"Dependency Inversion Principle (DIP) in Software Design Introduction The Dependency Inversion Principle (DIP) is one of the five SOLID principles of object-oriented design. It is fundamental to…"},{"slug":"domain-driven-design-core-concepts","title":"Domain Driven Design Core Concepts","categories":["Software design","Domain driven design"],"pubDate":"2020-03-23T04:49:46.000Z","excerpt":"In this blog I&#39;m sharing my understandings on the core concepts of Domain Driven Design. **Domain Driven Design** or **DDD** for short should only be used in fairly complex domain software. A…"},{"slug":"full-stack-developers","title":"Full stack developers","categories":["Fullstack","Thoughts"],"pubDate":"2021-02-21T04:49:46.000Z","excerpt":"Looking for the meaning of **full stack developer** on **Google**, yields a range of definitions. Some of which says, a full stack developer should knows all the back end languages or the front end…"},{"slug":"gitphoto","title":"GitPhoto","categories":["Git","Github","Gitphoto"],"pubDate":"2024-11-23T23:00:46.000Z","excerpt":"What is: Initially this project started with a different idea, but at the core, an alternate cloud storage solution, then I settled on a Github storage but I kept some elements of previous design…"},{"slug":"hexagonal-architecture","title":"Hexagonal Architecture","categories":["Software design","Software architecture"],"pubDate":"2020-03-29T04:49:46.000Z","excerpt":"> The _ **_hexagonal architecture_** _, or _ **_ports and adapters architecture_** _, is an architectural pattern used in _ **_software design_** _. It aims at creating loosely coupled application…"},{"slug":"how-to-push-large-projects-to-github","title":"How to push large projects to Github","categories":["Git","Github","Toolkit"],"pubDate":"2024-11-23T23:00:46.000Z","excerpt":"Recently, I've had to push a somewhat large project (~50 GB) to **Github** for the first time, the project was not tracked in **Git**, and hence trying a single commit with all the files failed with…"},{"slug":"interface-segregation-principle","title":"I from SOLID","categories":["Software design","SOLID"],"pubDate":"2024-07-10T23:00:46.000Z","excerpt":"Interface Segregation Principle (ISP) in Java Introduction The Interface Segregation Principle (ISP) is one of the five SOLID principles of object-oriented design, it states that no client should be…"},{"slug":"liskov-substitution-principle","title":"L from SOLID","categories":["Software design","SOLID"],"pubDate":"2024-06-19T23:00:46.000Z","excerpt":"The Liskov Substitution Principle (LSP) in Object-Oriented Design Introduction The Liskov Substitution Principle (LSP) is one of the five SOLID principles of object-oriented design, it states that…"},{"slug":"massively-scaling-a-web-application","title":"Massively scaling a web application","categories":["Software design","System design"],"pubDate":"2024-11-23T23:00:46.000Z","excerpt":"As user demands grow, scaling becomes critical. Whether it’s handling a surge in traffic, managing increasing amounts of data, or ensuring high availability, scaling ensures that an application…"},{"slug":"microservices-vs-monoliths","title":"Microservices vs Monoliths","categories":["Software design","Software architecture"],"pubDate":"2020-09-12T04:49:46.000Z","excerpt":"Microservices are an architectural style that splits a software to a collection of fine-grained services. Those services have to be: - Loosely coupled with other services. - Independently testable. -…"},{"slug":"open-closed-principle","title":"O from SOLID","categories":["Software design","SOLID"],"pubDate":"2024-06-09T23:00:46.000Z","excerpt":"Open/Closed Principle (OCP) in Software Design Introduction The Open/Closed Principle (OCP) is the second SOLID principle. It states that \"software entities (classes, modules, functions, etc.) should…"},{"slug":"react-hooks-usereducer-generics-params-in-typescript","title":"React Hooks: UseReducer Generics Params In Typescript","categories":["ReactJS","Thoughts","Typescript"],"pubDate":"2020-04-02T04:49:46.000Z","excerpt":"The new React Hooks introduces a lot of functions to encourage the creation of function components. One of those functions is the useReducer . Out of the box, the editor can infer the type of the…"},{"slug":"recallfilai-tech-stack","title":"Recallfilai part 1: requirements and tech stack","categories":["2025","tech","recallfilai"],"pubDate":"2025-02-09T23:00:46.000Z","excerpt":"What is: Document store with AI capabilities (**recallfilai** because AI is the hot word as of now) is the new year's opensource project for 2025. **Features**: * Upload, store, download documents. *…"},{"slug":"recallfilai-workflow","title":"Recallfilai: document workflow","categories":["2025","tech","recallfilai","workflow","document"],"pubDate":"2025-02-23T23:00:46.000Z","excerpt":"**System Overview:** This system introduces a linear workflow for \"Document\" objects, managed within a multi-tenant environment. Each \"Tenant\" defines a single, shared workflow that all its…"},{"slug":"single-responsibility-principle","title":"S from SOLID","categories":["Software design","SOLID"],"pubDate":"2024-06-02T04:49:46.000Z","excerpt":"Single Responsibility Principle (SRP) in Java Introduction The Single Responsibility Principle (SRP) is one of the five SOLID principles of object-oriented design. It states that a class should have…"},{"slug":"solid-principles","title":"SOLID","categories":["Software design","SOLID"],"pubDate":"2024-07-24T23:00:46.000Z","excerpt":"SOLID * Single Responsibility Principle (SRP) * Open/Closed Principle (OCP) * The Liskov Substitution Principle (LSP) * Interface Segregation Principle (ISP) * Dependency Inversion Principle (DIP)"},{"slug":"speed-up-your-computations","title":"Speed Up Your Computations","categories":["Performance"],"pubDate":"2017-09-11T04:49:46.000Z","excerpt":"Sometimes you find yourself trying to squeeze the last bits of your CPU to give you some more milliseconds. Or you may hate the smell of a melting CPU. Or maybe you are just a performance maniac. If…"},{"slug":"technical-debt","title":"Technical debt","categories":["Software design"],"pubDate":"2021-01-02T04:49:46.000Z","excerpt":"In an agile environment, during the sprint planning), prioritized tasks are defined, and unnecessary ones are deferred. tasks such as: - Migrate to the new programming language version. - Refactor a…"},{"slug":"tell-dont-ask-getters-are-evil","title":"Tell, Don’t Ask: Getters Are Evil","categories":["Software design"],"pubDate":"2020-03-21T04:49:46.000Z","excerpt":"Many times we were told that getters are evil and we should stop using them. So, What is wrong with getters ? Well, it leaks abstraction and you expose the internal structure of your objects (which…"},{"slug":"the-early-history-of-smalltalk","title":"Best Of: The Early History Of Smalltalk","categories":["Software design","Thoughts"],"pubDate":"2020-04-13T04:49:46.000Z","excerpt":"> Smalltalk’s design–and existence–is due to the insight that everything we can describe can be represented by the recursive composition of a single kind of behavioral building block that hides its…"}]