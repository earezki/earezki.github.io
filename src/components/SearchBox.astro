---
interface Props {
  /** Unique identifier for this search instance */
  containerId: string;
}

const { containerId } = Astro.props;
---

<div class="search-container">
  <div class="search-box">
    <!-- Search icon -->
    <svg 
      width="18" 
      height="18" 
      viewBox="0 0 24 24" 
      fill="none" 
      stroke="currentColor" 
      stroke-width="2" 
      stroke-linecap="round" 
      stroke-linejoin="round" 
      class="search-icon"
      aria-hidden="true"
    >
      <circle cx="11" cy="11" r="8"></circle>
      <path d="m21 21-4.35-4.35"></path>
    </svg>

    <!-- Search input -->
    <input 
      type="text" 
      id={`search-input-${containerId}`}
      placeholder="Search articles..." 
      class="search-input"
      autocomplete="off"
      aria-label="Search articles"
    />

    <!-- Clear button -->
    <button 
      id={`clear-search-${containerId}`} 
      class="clear-button" 
      style="display: none;"
      aria-label="Clear search"
    >
      <svg 
        width="16" 
        height="16" 
        viewBox="0 0 24 24" 
        fill="none" 
        stroke="currentColor" 
        stroke-width="2" 
        stroke-linecap="round" 
        stroke-linejoin="round"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
  </div>

  <!-- Search results summary -->
  <div 
    id={`search-results-${containerId}`} 
    class="search-results"
    role="status"
    aria-live="polite"
  >
  </div>
</div>

<style>
  .search-container {
    margin-bottom: 2rem;
  }
  
  .search-box {
    position: relative;
    max-width: 600px;
  }
  
  .search-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--color-text-alt);
    pointer-events: none;
  }
  
  .search-input {
    width: 100%;
    padding: 0.75rem 2.5rem 0.75rem 3rem;
    font-size: 1rem;
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    background: var(--color-bg-alt);
    color: var(--color-text);
    transition: border-color var(--transition), box-shadow var(--transition);
  }
  
  .search-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  }
  
  .search-input::placeholder {
    color: var(--color-text-alt);
  }
  
  .clear-button {
    position: absolute;
    right: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    cursor: pointer;
    color: var(--color-text-alt);
    padding: 0.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background var(--transition), color var(--transition);
  }
  
  .clear-button:hover {
    background: var(--color-bg);
    color: var(--color-text);
  }
  
  .search-results {
    margin-top: 0.5rem;
    font-size: 0.85rem;
    color: var(--color-text-alt);
  }
</style>

<script is:inline>
  /**
   * Client-side search functionality for filtering articles
   * Searches across title, excerpt, and tags
   */
  document.addEventListener('DOMContentLoaded', function() {
    const searchContainers = document.querySelectorAll('.search-container');
    
    searchContainers.forEach(function(container) {
      const searchInput = container.querySelector('.search-input');
      const clearButton = container.querySelector('.clear-button');
      const searchResults = container.querySelector('.search-results');
      const postsGrid = document.querySelector('.posts-grid');
      
      if (!searchInput || !postsGrid) return;
      
      let allPosts = [];
      
      /**
       * Extract searchable data from post cards
       */
      function extractPostData() {
        const postCards = postsGrid.querySelectorAll('.post-card');
        allPosts = Array.from(postCards).map(function(card) {
          const titleElement = card.querySelector('h3 a');
          const excerptElement = card.querySelector('.excerpt');
          const tagElements = card.querySelectorAll('.tag');
          
          return {
            element: card,
            title: titleElement ? titleElement.textContent.trim() : '',
            excerpt: excerptElement ? excerptElement.textContent.trim() : '',
            tags: Array.from(tagElements)
              .map(function(tag) { 
                return tag.textContent.trim(); 
              })
              .join(' ')
          };
        });
      }
      
      /**
       * Filter posts based on search query
       * @param {string} query - Search query string
       */
      function searchPosts(query) {
        // Reset view if no query
        if (!query) {
          allPosts.forEach(function(post) {
            post.element.style.display = '';
          });
          if (searchResults) searchResults.textContent = '';
          if (clearButton) clearButton.style.display = 'none';
          return;
        }
        
        if (clearButton) clearButton.style.display = 'flex';
        
        const lowerQuery = query.toLowerCase();
        let visibleCount = 0;
        
        // Filter posts based on query match
        allPosts.forEach(function(post) {
          const titleMatch = post.title.toLowerCase().includes(lowerQuery);
          const excerptMatch = post.excerpt.toLowerCase().includes(lowerQuery);
          const tagMatch = post.tags.toLowerCase().includes(lowerQuery);
          
          if (titleMatch || excerptMatch || tagMatch) {
            post.element.style.display = '';
            visibleCount++;
          } else {
            post.element.style.display = 'none';
          }
        });
        
        // Update results message
        if (searchResults) {
          if (visibleCount === 0) {
            searchResults.textContent = 'No articles found matching your search.';
          } else if (visibleCount === 1) {
            searchResults.textContent = '1 article found';
          } else {
            searchResults.textContent = visibleCount + ' articles found';
          }
        }
      }
      
      // Initialize
      extractPostData();
      
      // Event listeners
      searchInput.addEventListener('input', function(e) {
        searchPosts(e.target.value);
      });
      
      if (clearButton) {
        clearButton.addEventListener('click', function() {
          searchInput.value = '';
          searchPosts('');
          searchInput.focus();
        });
      }
    });
  });
</script>
