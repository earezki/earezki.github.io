---
import '../styles/global.css';
import ProgressBar from '../components/ProgressBar.astro';

export interface Props {
  title?: string;
  description?: string;
  keywords?: string;
  author?: string;
  image?: string;
  canonical?: string;
  noIndex?: boolean;
  structuredData?: Record<string, any> | null;
}
const siteTitle = 'Dev|Journal';
const siteDesc = 'Technical blog covering software architecture, backend development, and engineering best practices.';
const siteKeywords = 'software architecture, backend development, microservices, Java, Python, Spring Boot, technical blog';
const siteAuthor = 'El Mehdi Arezki';
const origin = 'https://earezki.com';
const defaultImage = origin + '/assets/og-image-default.jpg';

const { 
  title = siteTitle, 
  description = siteDesc, 
  keywords = siteKeywords,
  author = siteAuthor,
  image = defaultImage, 
  canonical, 
  noIndex = false, 
  structuredData = null 
} = Astro.props;

const fullTitle = title === siteTitle ? title : `${title} • ${siteTitle}`;
const canonicalUrl = canonical ? (canonical.startsWith('http') ? canonical : origin + canonical) : undefined;
---
<!DOCTYPE html>
<html lang="en" data-theme="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{fullTitle}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <meta name="author" content={author} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalUrl || origin} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:site_name" content={siteTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={canonicalUrl || origin} />
    <meta name="twitter:title" content={fullTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={image} />
    <meta name="twitter:creator" content="@earezki" />
    
    {canonicalUrl && <link rel="canonical" href={canonicalUrl} />}
    {noIndex && <meta name="robots" content="noindex,follow" />}
    <link rel="alternate" type="application/rss+xml" title="RSS" href="/rss.xml" />
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-161447264-1"></script>
    <script>
      // GA UA (legacy)
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-161447264-1');
      // Dark mode persistence
      (function(){
        const theme = localStorage.getItem('theme');
        if(theme){ document.documentElement.setAttribute('data-theme', theme); }
      })();
    </script>
    <script defer src="https://cloud.umami.is/script.js" data-website-id="4a26531d-1053-4f79-97a6-06a1366aff91"></script>
    {structuredData && <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />}
  </head>
  <body>
  <ProgressBar />
  <header class="site-header container">
      <div class="logo-wrap">
        <a class="logo" href="/">Dev|Journal</a>
      </div>
      <nav class="main-nav">
        <a href="/">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="vertical-align: -2px; margin-right: 4px;">
            <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
            <polyline points="9 22 9 12 15 12 15 22"></polyline>
          </svg>
          Home
        </a>
        <a href="/ai-news/" class="ai-news-link">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="vertical-align: -2px; margin-right: 4px;">
            <path d="M12 2a2 2 0 0 1 2 2c0 .74-.4 1.39-1 1.73V7h1a7 7 0 0 1 7 7h-9.5a.5.5 0 0 0-.5.5.5.5 0 0 1-1 0 .5.5 0 0 0-.5-.5H1a7 7 0 0 1 7-7h1V5.73c-.6-.34-1-.99-1-1.73a2 2 0 0 1 2-2z"></path>
            <path d="M7 15v4a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-4"></path>
          </svg>
          AI News
        </a>
        <a href="/tags/">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="vertical-align: -2px; margin-right: 4px;">
            <path d="M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2z"></path>
            <circle cx="7" cy="7" r="1.5"></circle>
          </svg>
          Tags
        </a>
        <a href="/about/">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="vertical-align: -2px; margin-right: 4px;">
            <circle cx="12" cy="12" r="10"></circle>
            <path d="M12 16v-4"></path>
            <path d="M12 8h.01"></path>
          </svg>
          About
        </a>
        <button id="themeToggle" class="theme-toggle" aria-label="Toggle dark mode">
          <span class="theme-icon">☾</span>
          <span class="theme-text">dark</span>
        </button>
      </nav>
    </header>
    <main class="container content-area">
      <slot />
    </main>
    <footer class="site-footer container">
  <p>© {new Date().getFullYear()} AREZKI El Mehdi • <a href="https://github.com/earezki">GitHub</a> • <a href="/rss.xml">RSS</a></p>
    </footer>
    <script>
      const btn = document.getElementById('themeToggle');
      const updateThemeButton = (theme) => {
        const icon = btn?.querySelector('.theme-icon');
        const text = btn?.querySelector('.theme-text');
        if (icon && text) {
          if (theme === 'dark') {
            icon.textContent = '☀';
            text.textContent = 'light';
          } else {
            icon.textContent = '☾';
            text.textContent = 'dark';
          }
        }
      };
      
      // Initialize button text based on current theme
      if(btn){
        const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
        updateThemeButton(currentTheme);
        
        btn.addEventListener('click', () => {
          const html = document.documentElement;
          const next = html.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
          html.setAttribute('data-theme', next);
          localStorage.setItem('theme', next);
          updateThemeButton(next);
        });
      }
    </script>
    
    <script is:inline>
      // Read/Unread article tracking
      (function() {
        const STORAGE_KEY = 'readArticles';
        
        function getReadArticles() {
          try {
            const data = localStorage.getItem(STORAGE_KEY);
            return data ? JSON.parse(data) : [];
          } catch (e) {
            return [];
          }
        }
        
        function markArticleAsRead(url) {
          try {
            const readArticles = getReadArticles();
            if (!readArticles.includes(url)) {
              readArticles.push(url);
              localStorage.setItem(STORAGE_KEY, JSON.stringify(readArticles));
            }
          } catch (e) {
            console.error('Failed to mark article as read:', e);
          }
        }
        
        function isArticleRead(url) {
          const readArticles = getReadArticles();
          return readArticles.includes(url);
        }
        
        // Update post cards on list pages
        function updatePostCards() {
          const postCards = document.querySelectorAll('.post-card[data-article-url]');
          postCards.forEach(function(card) {
            const url = card.getAttribute('data-article-url');
            if (url) {
              if (isArticleRead(url)) {
                card.classList.add('read');
                card.classList.remove('unread');
              } else {
                card.classList.add('unread');
                card.classList.remove('read');
              }
            }
          });
        }
        
        // Mark current article as read (on article pages)
        function markCurrentArticleAsRead() {
          const isArticlePage = document.querySelector('.post-body');
          if (isArticlePage) {
            const currentPath = window.location.pathname;
            markArticleAsRead(currentPath);
          }
        }
        
        // Initialize function
        function init() {
          updatePostCards();
          markCurrentArticleAsRead();
        }
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', init);
        
        // Handle back/forward navigation (bfcache)
        window.addEventListener('pageshow', function(event) {
          // If page is loaded from cache, update the cards
          if (event.persisted) {
            init();
          }
        });
      })();
    </script>
  </body>
</html>
