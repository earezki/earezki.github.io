---
import '../styles/global.css';
import ProgressBar from '../components/ProgressBar.astro';

/**
 * Base layout component for all pages
 * Provides consistent structure, meta tags, and analytics
 */
export interface Props {
  title?: string;
  description?: string;
  keywords?: string;
  author?: string;
  image?: string;
  canonical?: string;
  noIndex?: boolean;
  structuredData?: Record<string, any> | null;
}

// Site configuration
const SITE_CONFIG = {
  title: 'Dev|Journal',
  description: 'Technical blog covering software architecture, backend development, and engineering best practices.',
  keywords: 'software architecture, backend development, microservices, Java, Python, Spring Boot, technical blog',
  author: 'El Mehdi Arezki',
  origin: 'https://earezki.com',
  defaultImage: '/assets/og-image-default.jpg'
} as const;

const { 
  title = SITE_CONFIG.title, 
  description = SITE_CONFIG.description, 
  keywords = SITE_CONFIG.keywords,
  author = SITE_CONFIG.author,
  image = SITE_CONFIG.origin + SITE_CONFIG.defaultImage, 
  canonical, 
  noIndex = false, 
  structuredData = null 
} = Astro.props;

// Construct full title
const fullTitle = title === SITE_CONFIG.title 
  ? title 
  : `${title} • ${SITE_CONFIG.title}`;

// Construct canonical URL
const canonicalUrl = canonical 
  ? (canonical.startsWith('http') ? canonical : SITE_CONFIG.origin + canonical) 
  : undefined;
---

<!DOCTYPE html>
<html lang="en" data-theme="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- Primary Meta Tags -->
    <title>{fullTitle}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <meta name="author" content={author} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalUrl || SITE_CONFIG.origin} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:site_name" content={SITE_CONFIG.title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={canonicalUrl || SITE_CONFIG.origin} />
    <meta name="twitter:title" content={fullTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={image} />
    <meta name="twitter:creator" content="@earezki" />
    
    <!-- Canonical and Indexing -->
    {canonicalUrl && <link rel="canonical" href={canonicalUrl} />}
    {noIndex && <meta name="robots" content="noindex,follow" />}
    
    <!-- Favicons -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    
    <!-- RSS Feed -->
    <link rel="alternate" type="application/rss+xml" title="RSS" href="/rss.xml" />
    
    <!-- Analytics: Google Analytics (Legacy UA) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-161447264-1" is:inline></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);} 
      gtag('js', new Date()); 
      gtag('config', 'UA-161447264-1');
    </script>
    
    <!-- Analytics: Umami -->
    <script 
      defer 
      src="https://cloud.umami.is/script.js" 
      data-website-id="4a26531d-1053-4f79-97a6-06a1366aff91"
    ></script>
    
    <!-- Theme Persistence (runs before page render to prevent flash) -->
    <script is:inline>
      (function() {
        const theme = localStorage.getItem('theme');
        if (theme) { 
          document.documentElement.setAttribute('data-theme', theme); 
        }
      })();
    </script>
    
    <!-- Structured Data (JSON-LD) -->
    {structuredData && (
      <script 
        type="application/ld+json" 
        set:html={JSON.stringify(structuredData)} 
      />
    )}
  </head>
  
  <body>
    <ProgressBar />
    
    <!-- Site Header -->
    <header class="site-header container">
      <div class="logo-wrap">
        <a class="logo" href="/" aria-label="Dev|Journal Home">
          Dev|Journal
        </a>
      </div>
      
      <nav class="main-nav" aria-label="Main navigation">
        <a href="/">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" style="vertical-align: -2px; margin-right: 4px;">
            <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
            <polyline points="9 22 9 12 15 12 15 22"></polyline>
          </svg>
          Home
        </a>
        
        <a href="/ai-news/" class="ai-news-link">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" style="vertical-align: -2px; margin-right: 4px;">
            <path d="M12 2a2 2 0 0 1 2 2c0 .74-.4 1.39-1 1.73V7h1a7 7 0 0 1 7 7h-9.5a.5.5 0 0 0-.5.5.5.5 0 0 1-1 0 .5.5 0 0 0-.5-.5H1a7 7 0 0 1 7-7h1V5.73c-.6-.34-1-.99-1-1.73a2 2 0 0 1 2-2z"></path>
            <path d="M7 15v4a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-4"></path>
          </svg>
          AI News
        </a>
        
        <a href="/tags/">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" style="vertical-align: -2px; margin-right: 4px;">
            <path d="M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2z"></path>
            <circle cx="7" cy="7" r="1.5"></circle>
          </svg>
          Tags
        </a>
        
        <a href="/about/">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" style="vertical-align: -2px; margin-right: 4px;">
            <circle cx="12" cy="12" r="10"></circle>
            <path d="M12 16v-4"></path>
            <path d="M12 8h.01"></path>
          </svg>
          About
        </a>
        
        <button 
          id="themeToggle" 
          class="theme-toggle" 
          aria-label="Toggle dark mode"
        >
          <span class="theme-icon" aria-hidden="true">☾</span>
          <span class="theme-text">dark</span>
        </button>
      </nav>
    </header>
    
    <!-- Main Content -->
    <main class="container content-area">
      <slot />
    </main>
    
    <!-- Site Footer -->
    <footer class="site-footer container">
      <p>
        © {new Date().getFullYear()} AREZKI El Mehdi • 
        <a href="https://github.com/earezki">GitHub</a> • 
        <a href="/rss.xml">RSS</a> • 
        <a href="/sitemap-index.xml">Sitemap</a>
      </p>
    </footer>
    
    <!-- Theme Toggle Script -->
    <script>
      /**
       * Theme toggle functionality with localStorage persistence
       */
      const themeToggleBtn = document.getElementById('themeToggle');
      
      /**
       * Updates theme toggle button text and icon
       */
      const updateThemeButton = (theme: string): void => {
        if (!themeToggleBtn) return;
        
        const icon = themeToggleBtn.querySelector('.theme-icon');
        const text = themeToggleBtn.querySelector('.theme-text');
        
        if (icon && text) {
          if (theme === 'dark') {
            icon.textContent = '☀';
            text.textContent = 'light';
          } else {
            icon.textContent = '☾';
            text.textContent = 'dark';
          }
        }
      };
      
      // Initialize button based on current theme
      if (themeToggleBtn) {
        const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
        updateThemeButton(currentTheme);
        
        themeToggleBtn.addEventListener('click', () => {
          const html = document.documentElement;
          const nextTheme = html.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
          
          html.setAttribute('data-theme', nextTheme);
          localStorage.setItem('theme', nextTheme);
          updateThemeButton(nextTheme);
        });
      }
    </script>
    
    <!-- Article Read/Unread Tracking -->
    <script is:inline>
      /**
       * Tracks which articles have been read using localStorage
       * Updates post card styling on list pages
       */
      (function() {
        const STORAGE_KEY = 'readArticles';
        
        /**
         * Gets list of read article URLs from localStorage
         */
        function getReadArticles() {
          try {
            const data = localStorage.getItem(STORAGE_KEY);
            return data ? JSON.parse(data) : [];
          } catch (e) {
            console.error('Failed to get read articles:', e);
            return [];
          }
        }
        
        /**
         * Marks an article URL as read
         */
        function markArticleAsRead(url) {
          try {
            const readArticles = getReadArticles();
            if (!readArticles.includes(url)) {
              readArticles.push(url);
              localStorage.setItem(STORAGE_KEY, JSON.stringify(readArticles));
            }
          } catch (e) {
            console.error('Failed to mark article as read:', e);
          }
        }
        
        /**
         * Checks if an article has been read
         */
        function isArticleRead(url) {
          const readArticles = getReadArticles();
          return readArticles.includes(url);
        }
        
        /**
         * Updates post card styling on list pages based on read status
         */
        function updatePostCards() {
          const postCards = document.querySelectorAll('.post-card[data-article-url]');
          
          postCards.forEach(function(card) {
            const url = card.getAttribute('data-article-url');
            if (!url) return;
            
            if (isArticleRead(url)) {
              card.classList.add('read');
              card.classList.remove('unread');
            } else {
              card.classList.add('unread');
              card.classList.remove('read');
            }
          });
        }
        
        /**
         * Marks current article as read (on article detail pages)
         */
        function markCurrentArticleAsRead() {
          const isArticlePage = document.querySelector('.post-body');
          if (isArticlePage) {
            const currentPath = window.location.pathname;
            markArticleAsRead(currentPath);
          }
        }
        
        /**
         * Initialize tracking system
         */
        function init() {
          updatePostCards();
          markCurrentArticleAsRead();
        }
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', init);
        
        // Handle back/forward navigation (bfcache)
        window.addEventListener('pageshow', function(event) {
          if (event.persisted) {
            init();
          }
        });
      })();
    </script>
    
    <!-- Code Copy Functionality -->
    <script is:inline>
      /**
       * Adds copy buttons to all code blocks
       */
      (function() {
        /**
         * Creates a copy button element
         */
        function createCopyButton() {
          const button = document.createElement('button');
          button.className = 'copy-code-button';
          button.setAttribute('aria-label', 'Copy code to clipboard');
          button.innerHTML = `
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
              <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
            </svg>
            <span>Copy</span>
          `;
          return button;
        }
        
        /**
         * Creates a success checkmark icon
         */
        function createCheckIcon() {
          return `
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="20 6 9 17 4 12"></polyline>
            </svg>
            <span>Copied!</span>
          `;
        }
        
        /**
         * Copies text to clipboard
         */
        async function copyToClipboard(text) {
          try {
            await navigator.clipboard.writeText(text);
            return true;
          } catch (err) {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = text;
            textArea.style.position = 'fixed';
            textArea.style.left = '-999999px';
            document.body.appendChild(textArea);
            textArea.select();
            try {
              document.execCommand('copy');
              document.body.removeChild(textArea);
              return true;
            } catch (e) {
              document.body.removeChild(textArea);
              return false;
            }
          }
        }
        
        /**
         * Handles copy button click
         */
        async function handleCopyClick(button, codeBlock) {
          const code = codeBlock.textContent || '';
          const success = await copyToClipboard(code);
          
          if (success) {
            const originalHTML = button.innerHTML;
            button.classList.add('copied');
            button.innerHTML = createCheckIcon();
            
            setTimeout(function() {
              button.classList.remove('copied');
              button.innerHTML = originalHTML;
            }, 2000);
          }
        }
        
        /**
         * Adds copy buttons to all code blocks
         */
        function addCopyButtons() {
          const codeBlocks = document.querySelectorAll('.post-body pre');
          
          codeBlocks.forEach(function(pre) {
            // Skip if button already exists
            if (pre.querySelector('.copy-code-button')) {
              return;
            }
            
            const button = createCopyButton();
            const codeBlock = pre.querySelector('code');
            
            if (codeBlock) {
              button.addEventListener('click', function() {
                handleCopyClick(button, codeBlock);
              });
              
              pre.appendChild(button);
            }
          });
        }
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', addCopyButtons);
      })();
    </script>
  </body>
</html>
