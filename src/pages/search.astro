---
import BaseLayout from "../layouts/BaseLayout.astro";
const searchUrl = Astro.site ? new URL('/search.json', Astro.site).toString() : '/search.json';
---
<BaseLayout title="Search" description="Search posts" canonical="/search/">
  <h1>Search</h1>
  <div class="search-box">
    <input id="q" type="search" placeholder="Type to search posts..." autofocus />
  </div>
  <div id="results" class="search-results">Loading…</div>
  <script>
    // Inject the server-computed search URL so client code always has a defined value
    window.__SEARCH_URL = '{searchUrl}';
  </script>
  <script>
    (async function(){
      const input = document.getElementById('q');
      const results = document.getElementById('results');
      let data = [];
      // Utility to escape HTML used by render()
      function escapeHtml(s) {
        return String(s)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;');
      }

      try {
  const res = await fetch(window.__SEARCH_URL || '/search.json');
        if (!res.ok) throw new Error('Failed to load search index');
        const json = await res.json();
        // precompute a lowercased search blob for each item to speed searches and avoid errors
        data = json.map(p => ({
          ...p,
          _search: ((p.title||'') + ' ' + (Array.isArray(p.categories)?p.categories.join(' '):'') + ' ' + (p.excerpt||'')).toLowerCase()
        }));
        render('');
      } catch (err) {
        results.innerHTML = `<p style="opacity:.8;">Search unavailable: ${String(err.message)}</p>`;
        console.error('Search index load error', err);
        return;
      }

      function render(term){
        const t = (term || '').toLowerCase().trim();
        const filtered = !t ? data.slice(0,30) : data.filter(p => p._search.includes(t));
        if (!filtered.length) {
          results.innerHTML = `<p style="opacity:.85;">No results for <strong>"${escapeHtml(term)}"</strong></p>`;
          return;
        }
        results.innerHTML = filtered.map(p => `\
          <article class='res-item'>\
            <h3><a href='/${p.slug}/'>${escapeHtml(p.title)}</a></h3>\
            <div class='meta'>${escapeHtml((p.pubDate||'').substring(0,10))} • ${escapeHtml((Array.isArray(p.categories)?p.categories.join(', '):''))}</div>\
            <p>${escapeHtml(p.excerpt)}</p>\
          </article>`).join('');
      }

      input.addEventListener('input', e => render(e.target.value));
    })();
  </script>
</BaseLayout>

<style>
  .search-box { margin:1rem 0 1.5rem; }
  #q { width:100%; max-width:480px; padding:.75rem 1rem; font-size:1rem; border:1px solid var(--color-border); border-radius: var(--radius-md); background:var(--color-bg-alt); }
  #q:focus { outline:2px solid var(--color-accent); }
  .search-results { display:flex; flex-direction:column; gap:1.2rem; }
  .res-item { padding:1rem 1.1rem 1.2rem; background:var(--color-bg-alt); border:1px solid var(--color-border); border-radius: var(--radius-md); }
  .res-item h3 { margin:.2rem 0 .4rem; font-size:1.05rem; }
  .res-item .meta { font-size:.7rem; text-transform:uppercase; letter-spacing:.08em; color: var(--color-text-alt); margin-bottom:.4rem; }
  .res-item p { margin:0; font-size:.85rem; line-height:1.45; }
</style>
